openapi: 3.0.1
info:
  title: XPipe API Documentation
  description: |
    The XPipe API provides programmatic access to XPipeâ€™s features.
    
    The XPipe application will start up an HTTP server that can be used to send requests.
    Note that this server is HTTP-only for now as it runs only on localhost. HTTPS requests are not accepted.
    
    See the authentication handshake below on how to authenticate prior to sending requests.
    For development, you can also skip the authentication step by disabling it in the settings menu.
  contact:
    name: XPipe - Contact us
    url: mailto:hello@xpipe.io
  version: "17.0"
servers:
  - url: http://localhost:21721
    description: XPipe Daemon API
paths:
  /handshake:
    post:
      summary: Establish session
      description: |
        Prior to sending requests to the API, you first have to establish a new API session via the handshake endpoint.
        In the response you will receive a session token that you can use to authenticate during this session.
        
        This is done so that the daemon knows what kind of clients are connected and can manage individual capabilities for clients.
        If your client is running on the same system as the daemon, you can choose the local authentication method to avoid having to deal with API keys.
        If your client does not have file system access, e.g. if it is running remotely, then you have to use an API key.
        
        Note that for development you can also turn off the required authentication in the XPipe settings menu, allowing you to send unauthenticated requests.
        
        Certain connection IDs are hardcoded, e.g. the ID of the local machine connection. This makes it easier to perform actions on it across systems.
        The local machine connection ID is "f0ec68aa-63f5-405c-b178-9a4454556d6b". This one will be used in many of these samples.
      operationId: handshake
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HandshakeRequest'
            examples:
              local:
                summary: Local application handshake
                value: { "auth": { "type": "Local", "authFileContent": "<Contents of the local file <temp dir>/xpipe_auth>" }, "client": { "type": "Api", "name": "My client name" } }
              local-ptb:
                summary: Local PTB application handshake
                value: { "auth": { "type": "Local", "authFileContent": "<Contents of the local file <temp dir>/xpipe_ptb_auth>" }, "client": { "type": "Api", "name": "My client name" } }
              remote:
                summary: API key handshake
                value: { "auth": { "type": "ApiKey", "key": "<API key>" }, "client": { "type": "Api", "name": "My client name" } }
      responses:
        '200':
          description: The handshake was successful. The returned token can be used for authentication in this session. The token is valid as long as XPipe is running.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HandshakeResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /connection/query:
    post:
      summary: Query connections
      description: |
        Queries all connections using various filters.
        
        The filters support globs and can match the category names and connection names.
        All matching is case insensitive.
      operationId: connectionQuery
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionQueryRequest'
            examples:
              all:
                summary: All
                value: { "categoryFilter": "**", "connectionFilter": "**", "typeFilter": "*" }
              simple:
                summary: Local machine
                value: { "categoryFilter": "default", "connectionFilter": "local machine", "typeFilter": "*" }
              globs:
                summary: Podman containers with globs
                value: { "categoryFilter": "**", "connectionFilter": "**/podman/*", "typeFilter": "*" }
      responses:
        '200':
          description: The query was successful. The body contains all matched connections.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionQueryResponse'
              examples:
                standard:
                  summary: Matched connections
                  value: { "found": [ "f0ec68aa-63f5-405c-b178-9a4454556d6b" ] }
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /connection/info:
    post:
      summary: Get connection info
      description: |
        Queries detailed information about a connection.
      operationId: connectionInfo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionInfoRequest'
            examples:
              simple:
                summary: Single connection
                value: { "connections": [ "f0ec68aa-63f5-405c-b178-9a4454556d6b" ] }
      responses:
        '200':
          description: The query was successful. The body contains the detailed connection information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionInfoResponse'
              examples:
                standard:
                  summary: Single connection information
                  value: { "infos": [ { "connection": "f0ec68aa-63f5-405c-b178-9a4454556d6b", "category": [ "default" ] ,
                                        "name": [ "local machine" ], "type": "local", "rawData": { }, "usageCategory": "shell",
                                        "lastUsed": "2024-05-31T11:53:02.408504600Z", "lastModified": "2024-06-23T21:15:25.608097Z",
                                        "state": { } } ] }
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /connection/add:
    post:
      summary: Add connection
      description: |
        Creates the new connection in the xpipe vault from raw json data.
        This can also perform an optional validation first to make sure that the connection can be established.
        
        If an equivalent connection already exists, no new one will be added.
      operationId: connectionAdd
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionAddRequest'
            examples:
              simple:
                summary: Add new pwsh environment
                value: { "name": "my connection", "validate": true, "category": "97458c07-75c0-4f9d-a06e-92d8cdf67c40", "data":
                  {
                    "type": "shellEnvironment",
                    "commands": null,
                    "host": {
                      "storeId": "f0ec68aa-63f5-405c-b178-9a4454556d6b"
                    },
                    "shell": "pwsh",
                    "elevated": false,
                  }
                }
      responses:
        '200':
          description: The request was successful. The connection was added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionAddResponse'
              examples:
                standard:
                  summary: Returned connection
                  value: { "connection": "36ad9716-a209-4f7f-9814-078d3349280c" }
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /category/add:
    post:
      summary: Add category
      description: |
        Creates a new empty category in the vault.
        
        New categories always need a parent as it's not allowed to create root categories.
      operationId: categoryAdd
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryAddRequest'
            examples:
              simple:
                summary: Add new category
                value: { "name": "my category", "parent": "97458c07-75c0-4f9d-a06e-92d8cdf67c40" }
      responses:
        '200':
          description: The request was successful. The category was added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryAddResponse'
              examples:
                standard:
                  summary: Category information
                  value: { "category": "36ad9716-a209-4f7f-9814-078d3349280c" }
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /category/query:
    post:
      summary: Query categories
      description: |
        Queries all categories using a filter.
        
        The filter supports globs and can match the category names.
        All matching is case insensitive.
      operationId: categoryQuery
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryQueryRequest'
            examples:
              all:
                summary: All
                value: { "filter": "**" }
              simple:
                summary: Default
                value: { "filter": "all connections/default" }
              globs:
                summary: First level categories
                value: { "filter": "all connections/*" }
      responses:
        '200':
          description: The query was successful. The body contains all matched categories.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryQueryResponse'
              examples:
                standard:
                  summary: Matched categories
                  value: { "found": [ "97458c07-75c0-4f9d-a06e-92d8cdf67c40" ] }
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /category/info:
    post:
      summary: Get category info
      description: |
        Queries detailed information about categories.
      operationId: categoryInfo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInfoRequest'
            examples:
              simple:
                summary: Single category
                value: { "categories": [ "97458c07-75c0-4f9d-a06e-92d8cdf67c40" ] }
      responses:
        '200':
          description: The query was successful. The body contains the detailed category information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryInfoResponse'
              examples:
                standard:
                  summary: Single category information
                  value: { "infos": [ { "category": "97458c07-75c0-4f9d-a06e-92d8cdf67c40",
                                        "parentCategory": "bfb0b51a-e7a3-4ce4-8878-8d4cb5828d6c",
                                        "name": [ "all connections", "default" ],
                                        "lastUsed": "2024-05-31T11:53:02.408504600Z",
                                        "lastModified": "2024-06-23T21:15:25.608097Z",
                                        "config": { } } ] }
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /category/remove:
    post:
      summary: Remove categories
      description: |
        Removes a set of categories. This can include any possible children categories and connections associated with the category.
        
        Some categories, for example the root categories, can not be removed.
      operationId: categoryRemove
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRemoveRequest'
            examples:
              simple:
                summary: Remove single category
                value: { "categories": [ "36ad9716-a209-4f7f-9814-078d3349280c" ] }
      responses:
        '200':
          description: The removal was successful.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /connection/remove:
    post:
      summary: Remove connection
      description: |
        Removes a set of connections. This includes any possible children associated with the connection.
        
        Some connections, for example the local machine, can not be removed.
      operationId: connectionRemove
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionRemoveRequest'
            examples:
              simple:
                summary: Remove single connection
                value: { "connections": [ "36ad9716-a209-4f7f-9814-078d3349280c" ] }
      responses:
        '200':
          description: The removal was successful.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /connection/refresh:
    post:
      summary: Refresh connection
      description: |
        Performs a refresh on the specified connection.
        
        This will update the connection state information and also any children if the connection type has any.
      operationId: connectionRefresh
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionRefreshRequest'
            examples:
              simple:
                summary: Refresh connection
                value: { "connection": "36ad9716-a209-4f7f-9814-078d3349280c" }
      responses:
        '200':
          description: The request was successful. The connection state was updated.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /shell/start:
    post:
      summary: Start shell connection
      description: |
        Starts a new shell session for a connection. If an existing shell session is already running for that connection, this operation will do nothing.
        
        Note that there are a variety of possible errors that can occur here when establishing the shell connection.
        These errors will be returned with the HTTP return code 500.
      operationId: shellStart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShellStartRequest'
            examples:
              local:
                summary: Start local shell
                value: { "connection": "f0ec68aa-63f5-405c-b178-9a4454556d6b" }
      responses:
        '200':
          description: The operation was successful. The shell session was started.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShellStartResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /shell/stop:
    post:
      summary: Stop shell connection
      description: |
        Stops an existing shell session for a connection.
        
        This operation will return once the shell has exited.
        If the shell is busy or stuck, you might have to work with timeouts to account for these cases.
      operationId: shellStop
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShellStopRequest'
            examples:
              local:
                summary: Stop local shell
                value: { "connection": "f0ec68aa-63f5-405c-b178-9a4454556d6b" }
      responses:
        '200':
          description: The operation was successful. The shell session was stopped.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /shell/exec:
    post:
      summary: Run command in shell session
      description: |
        Runs a command in an active shell session and waits for it to finish. The exit code and output will be returned in the response.
        
        Note that a variety of different errors can occur when executing the command.
        If the command finishes, even with an error code, a normal HTTP 200 response will be returned.
        However, if any other error occurs like the shell not responding or exiting unexpectedly, an HTTP 500 response will be returned.
      operationId: shellExec
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShellExecRequest'
            examples:
              user:
                summary: echo $USER
                value: { "connection": "f0ec68aa-63f5-405c-b178-9a4454556d6b", "command": "echo $USER" }
              invalid:
                summary: invalid
                value: { "connection": "f0ec68aa-63f5-405c-b178-9a4454556d6b", "command": "invalid" }
      responses:
        '200':
          description: The operation was successful. The shell command finished.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShellExecResponse'
              examples:
                user:
                  summary: echo $USER
                  value: { "exitCode": 0, "stdout": "root", "stderr": "" }
                fail:
                  summary: invalid
                  value: { "exitCode": 127, "stdout": "", "stderr": "invalid: command not found" }
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /fs/blob:
    post:
      summary: Store raw file blob
      description: |
        Stores arbitrary binary data in a blob such that it can be used later on to for example write to a remote file.
        
        This will return a uuid which can be used as a reference to the blob.
        You can also store normal text data in blobs if you intend to create text or shell script files with it.
      operationId: fsData
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: The operation was successful. The data was stored.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FsBlobResponse'
              examples:
                success:
                  summary: Success
                  value: { "blob": "854afc45-eadc-49a0-a45d-9fb76a484304" }
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /fs/read:
    post:
      summary: Read a remote file
      description: |
        Reads the entire content of a remote file through an active shell session.
      operationId: fsRead
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FsReadRequest'
            examples:
              simple:
                summary: Read file
                value: { "connection": "f0ec68aa-63f5-405c-b178-9a4454556d6b", "path": "/home/user/myfile.txt" }
      responses:
        '200':
          description: The operation was successful. The file was read.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /fs/write:
    post:
      summary: Write blob to a remote file
      description: |
        Writes blob data to a file through an active shell session.
      operationId: fsWrite
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FsWriteRequest'
            examples:
              simple:
                summary: Write simple file
                value: { "connection": "f0ec68aa-63f5-405c-b178-9a4454556d6b", "blob": "854afc45-eadc-49a0-a45d-9fb76a484304", "path": "/home/user/myfile.txt" }
      responses:
        '200':
          description: The operation was successful. The file was written.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /fs/script:
    post:
      summary: Write blob to a shell script
      description: |
        Creates a shell script in the temporary directory of the file system that is access through the shell connection.
        
        This can be used to run more complex commands on remote systems.
      operationId: fsScript
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FsScriptRequest'
            examples:
              standard:
                summary: Standard write
                value: { "connection": "f0ec68aa-63f5-405c-b178-9a4454556d6b", "blob": "854afc45-eadc-49a0-a45d-9fb76a484304" }
      responses:
        '200':
          description: The operation was successful. The script file was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FsScriptResponse'
              examples:
                success:
                  summary: Success
                  value: { "path": "/tmp/xpipe-123.sh" }
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /action:
    post:
      summary: Execute an action
      description: |
        Executes an action, which is defined by its own schema. To obtain the schema and data for any action within XPipe, use the action shortcut menu.
      operationId: action
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionRequest'
            examples:
              simple:
                summary: Launch local machine terminal
                value: { "action": {
                    "ref" : "f0ec68aa-63f5-405c-b178-9a4454556d6b",
                    "id" : "launch"
                  },
                  "confirm": false
                }
              batch:
                summary: Run a script in batch mode
                value: { "action": {
                    "ref" : [ "3c7ebb2a-e420-4190-b885-23fc9fada2ca", "30ee96ae-6b4c-4cde-8262-fd64ec93ad29" ],
                    "scriptStore" : "cd34e0a7-2f3e-4327-ae51-5d8537f56bb1",
                    "id" : "runTerminalStore"
                  }, "confirm": false
                }
      responses:
        '200':
          description: The action was executed successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /secret/encrypt:
    post:
      summary: Encrypts a secret
      description: |
        For connections, the secrets are encrypted in json form.
        
        When creating connections in an automated fashion, secrets have to be first converted into the proper representation. To obtain the representation of a secret of an existing connection, use the decrypt endpoint.
        
        The secret encryption method depends on your vault setup. Without any vault user and passphrase, the secret will be encrypted with a generic vault key. If you have a vault user and custom passphrase set up, the secret will be encrypted with your passphrase key.
      operationId: secretEncrypt
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretEncryptRequest'
            examples:
              simple:
                summary: Encrypt string
                value: { "value": "123" }
      responses:
        '200':
          description: The request was successful. The secret was encrypted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretEncryptResponse'
              examples:
                standard:
                  summary: Encrypted representation
                  value: { "encrypted": {'encryptedToken': {'token': 'lX6JOtL-mKbuUBR4nYdhJsv3RzrXm+f+JLLKpkSAfg=='}, 'secret': {'encryptedValue': 'VR1brTq1-i3p5fLcz5O58tmbnmDjRKL5IOmSkFaQag==', 'type': 'locked'}} }
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /secret/decrypt:
    post:
      summary: Decrypts a secret
      description: |
        For connections, the secrets are encrypted in json form.
        
        When creating connections in an automated fashion, secrets have to be first converted into the proper representation. This endpoint can be used to obtain the representation of a secret of an existing connection.
      operationId: secretDecrypt
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretDecryptRequest'
            examples:
              simple:
                summary: Decrypt secret
                value: { "encrypted": {'encryptedToken': {'token': 'lX6JOtL-mKbuUBR4nYdhJsv3RzrXm+f+JLLKpkSAfg=='}, 'secret': {'encryptedValue': 'VR1brTq1-i3p5fLcz5O58tmbnmDjRKL5IOmSkFaQag==', 'type': 'locked'}} }
      responses:
        '200':
          description: The request was successful. The secret was decrypted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretDecryptResponse'
              examples:
                standard:
                  summary: Decrypted secret
                  value: { "decrypted": "123" }
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /daemon/version:
    post:
      summary: Query daemon version
      description: Retrieves version information from the daemon
      operationId: daemonVersion
      responses:
        '200':
          description: The operation was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaemonVersionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    ShellStartRequest:
      type: object
      properties:
        connection:
          type: string
          description: The connection uuid
      required:
        - connection
    ShellStartResponse:
      type: object
      properties:
        shellDialect:
          type: integer
          description: The shell dialect
        osType:
          type: string
          description: The general type of operating system
        osName:
          type: string
          description: The display name of the operating system
        ttyState:
          type: string
          description: Whether a tty/pty has been allocated for the connection. If allocated, input and output will be unreliable. It is not recommended to use a shell connection then.
        temp:
          type: string
          description: The location of the temporary directory
      required:
        - shellDialect
        - osType
        - osName
        - temp
    ShellStopRequest:
      type: object
      properties:
        connection:
          type: string
          description: The connection uuid
      required:
        - connection
    ShellExecRequest:
      type: object
      properties:
        connection:
          type: string
          description: The connection uuid
        command:
          type: string
          description: The command to execute
      required:
        - connection
        - command
    ShellExecResponse:
      type: object
      properties:
        exitCode:
          type: integer
          description: The exit code of the command
        stdout:
          type: string
          description: The stdout output of the command
        stderr:
          type: string
          description: The stderr output of the command
      required:
        - exitCode
        - stdout
        - stderr
    FsBlobResponse:
      type: object
      properties:
        blob:
          type: string
          description: The data uuid
      required:
        - blob
    FsWriteRequest:
      type: object
      properties:
        connection:
          type: string
          description: The connection uuid
        blob:
          type: string
          description: The blob uuid
        path:
          type: string
          description: The target filepath
      required:
        - connection
        - blob
        - path
    FsReadRequest:
      type: object
      properties:
        connection:
          type: string
          description: The connection uuid
        path:
          type: string
          description: The target file path
      required:
        - connection
        - path
    FsScriptRequest:
      type: object
      properties:
        connection:
          type: string
          description: The connection uuid
        blob:
          type: string
          description: The blob uuid
      required:
        - connection
        - blob
    FsScriptResponse:
      type: object
      properties:
        path:
          type: string
          description: The generated script file path
      required:
        - path
    ConnectionQueryRequest:
      type: object
      properties:
        categoryFilter:
          type: string
          description: The filter string to match categories. Categories are delimited by / if they are hierarchical. The filter supports globs.
        connectionFilter:
          type: string
          description: The filter string to match connection names. Connection names are delimited by / if they are hierarchical. The filter supports globs.
        typeFilter:
          type: string
          description: The filter string to connection types. Every unique type of connection like SSH or docker has its own type identifier that you can match. The filter supports globs.
      required:
        - categoryFilter
        - connectionFilter
        - typeFilter
    ConnectionQueryResponse:
      type: object
      properties:
        found:
          type: array
          description: The found connections
          items:
            type: string
            description: The connection uuid
      required:
        - found
    CategoryQueryRequest:
      type: object
      properties:
        filter:
          type: string
          description: The filter string to match category names. Category names are delimited by / if they are hierarchical. The filter supports globs.
      required:
        - filter
    CategoryQueryResponse:
      type: object
      properties:
        found:
          type: array
          description: The found categories
          items:
            type: string
            description: The category uuid
      required:
        - found
    CategoryInfoRequest:
      type: object
      properties:
        categories:
          type: array
          description: The categories
          items:
            type: string
            description: The unique id of the category
      required:
        - categories
    CategoryInfoResponse:
      type: array
      items:
        type: object
        description: The array of information for each category
        properties:
          category:
            type: string
            description: The unique id of the category
          parentCategory:
            type: string
            description: The unique id of the parent category, if present
          name:
            type: array
            description: The full category name path as an array
            items:
              type: string
              description: Individual category name
          lastModified:
            type: string
            description: The timestamp of when the category configuration was last modified in ISO 8601
          lastUsed:
            type: string
            description: The timestamp of when the category was last launched in ISO 8601
          config:
            type: object
            description: The internal configuration data of the category
        required:
          - category
          - parentCategory
          - name
          - lastUsed
          - lastModified
          - config
    ConnectionInfoRequest:
      type: object
      properties:
        connections:
          type: array
          description: The connections
          items:
            type: string
            description: The unique id of the connection
      required:
        - connections
    ConnectionInfoResponse:
      type: array
      items:
        type: object
        description: The array of information for each connection
        properties:
          connection:
            type: string
            description: The unique id of the connection
          category:
            type: array
            description: The full category path as an array
            items:
              type: string
              description: Individual category name
          name:
            type: array
            description: The full connection name path as an array
            items:
              type: string
              description: Individual connection name
          type:
            type: string
            description: The type identifier of the connection
          rawData:
            type: object
            description: The raw internal configuration data for the connection. The schema for these is internal and should not be relied upon.
          usageCategory:
            type: string
            description: The category of how this connection can be used.
            enum:
              - shell
              - tunnel
              - script
              - database
              - command
              - desktop
              - group
          lastModified:
            type: string
            description: The timestamp of when the connection configuration was last modified in ISO 8601
          lastUsed:
            type: string
            description: The timestamp of when the connection was last launched in ISO 8601
          state:
            type: object
            description: The internal persistent state information about the connection
          cache:
            type: object
            description: The temporary cache data for the connection
        required:
          - connection
          - category
          - name
          - type
          - rawData
          - usageCategory
          - lastUsed
          - lastModified
          - state
          - cache
    ConnectionRefreshRequest:
      type: object
      properties:
        connection:
          type: string
          description: The connection uuid
      required:
        - connection
    ConnectionAddRequest:
      type: object
      properties:
        name:
          type: string
          description: The connection name
        data:
          type: object
          description: The raw connection store data. Schemas for connection types are not documented, but you can find the connection data of your existing connections in the xpipe vault.
        validate:
          type: boolean
          description: Whether to perform a connection validation before adding it, i.e., probe the connection first. If validation is enabled and fails, the connection will not be added
        category:
          type: string
          description: The category uuid to put the connection in. If not specified, the default category will be used
      required:
        - name
        - data
        - validate
    ConnectionAddResponse:
      type: object
      properties:
        connection:
          type: string
          description: The connection uuid
      required:
        - connection
    CategoryAddRequest:
      type: object
      properties:
        name:
          type: string
          description: The category name
        parent:
          type: string
          description: The parent category uuid to put the new category in
      required:
        - name
        - parent
    CategoryAddResponse:
      type: object
      properties:
        category:
          type: string
          description: The category uuid
      required:
        - category
    ConnectionRemoveRequest:
      type: object
      properties:
        connections:
          type: array
          description: The connections to remove
          items:
            type: string
            description: The unique id of the connection
      required:
        - connections
    CategoryRemoveRequest:
      type: object
      properties:
        categories:
          type: array
          description: The categories to remove
          items:
            type: string
            description: The unique id of the category
        removeChildrenCategories:
          type: boolean
          description: Whether to also remove any children categories
        removeContents:
          type: boolean
          description: Whether to also remove any connection entries in the categories. If this is false, any connections are moved to the default category instead.
      required:
        - categories
        - removeChildrenCategories
        - removeContents
    ActionRequest:
      type: object
      properties:
        action:
          type: object
          description: The raw action data in json form. The best way to obtain this data is to use the action shortcut creation functionality.
        confirm:
          type: boolean
          description: If the action is modifying something and the category has been configured to confirm all modifications, a confirmation dialog will be shown if this is is true.
      required:
        - action
        - confirm
    SecretEncryptRequest:
      type: object
      properties:
        value:
          type: string
          description: The raw string value to encrypt
      required:
        - value
    SecretEncryptResponse:
      type: object
      properties:
        encrypted:
          type: object
          description: The internal encrypted representation of the secret
      required:
        - encrypted
    SecretDecryptRequest:
      type: object
      properties:
        encrypted:
          type: object
          description: The internal encrypted representation of the secret
      required:
        - encrypted
    SecretDecryptResponse:
      type: object
      properties:
        decrypted:
          type: string
          description: The decrypted secret
    HandshakeRequest:
      type: object
      properties:
        auth:
          $ref: '#/components/schemas/AuthMethod'
        client:
          $ref: '#/components/schemas/ClientInformation'
      required:
        - auth
        - client
    HandshakeResponse:
      type: object
      properties:
        sessionToken:
          type: string
          description: The generated bearer token that can be used for authentication in this session
      required:
        - sessionToken
    DaemonVersionResponse:
      type: object
      properties:
        version:
          type: string
          description: The version of the running daemon
        canonicalVersion:
          type: string
          description: The canonical version of the running daemon
        buildVersion:
          type: string
          description: The build timestamp
        jvmVersion:
          type: string
          description: The version of the Java Virtual Machine in which the daemon is running
        pro:
          type: boolean
          description: Whether the daemon supports professional edition features
      required:
        - version
        - canonicalVersion
        - buildVersion
        - jvmVersion
        - pro
    AuthMethod:
      discriminator:
        propertyName: type
        mapping:
          apiKey: '#/components/schemas/ApiKey'
          local: '#/components/schemas/Local'
      oneOf:
        - $ref: '#/components/schemas/ApiKey'
        - $ref: '#/components/schemas/Local'
    ApiKey:
      description: API key authentication
      type: object
      properties:
        type:
          type: string
        key:
          type: string
          description: The API key
      required:
        - key
        - type
    Local:
      description: |
        Authentication method for local applications. Uses file system access as proof of authentication.
        
        You can find the authentication file at:
        - %TEMP%\xpipe_auth on Windows
        - $TMP/xpipe_auth on Linux
        - $TMPDIR/xpipe_auth on macOS
        
        For the PTB releases the file name is changed to xpipe_ptb_auth to prevent collisions.
        
        As the temporary directory on Linux is global, the daemon might run as another user and your current user might not have permissions to access the auth file.
      type: object
      properties:
        type:
          type: string
        authFileContent:
          type: string
          description: The contents of the local file <temp dir>/xpipe_auth. This file is automatically generated when XPipe starts.
      required:
        - authFileContent
        - type
    ClientInformation:
      type: object
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
      required:
        - type
    ApiClientInformation:
      description: Provides information about the client that connected to the XPipe API.
      allOf:
        - $ref: '#/components/schemas/ClientInformation'
        - type: object
          properties:
            name:
              type: string
              description: The name of the client.
          required:
            - name
    ClientErrorResponse:
      description: Error returned in case of a client exception
      type: object
      properties:
        message:
          type: string
          description: The error message
      required:
        - message
    ServerErrorResponse:
      description: Error returned in case of a server exception with HTTP code 500
      type: object
      properties:
        error:
          type: object
          description: The exception information
          properties:
            cause:
              type: object
              description: The exception cause
            stackTrace:
              type: array
              description: The java stack trace information
            suppressed:
              type: array
              description: Any suppressed exceptions
            localizedMessage:
              type: string
              description: Not used
            message:
              type: string
              description: The error message
          required:
            - message
      required:
        - error
  responses:
    Success:
      description: The action was successfully performed.
    BadRequest:
      description: Bad request. Please check error message and your parameters.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClientErrorResponse'
    Unauthorized:
      description: Authorization failed. Please supply a `Bearer` token via
        the `Authorization` header.
    Forbidden:
      description: Authorization failed. Please supply a valid `Bearer` token via
        the `Authorization` header.
    NotFound:
      description: The requested resource could not be found.
    InternalServerError:
      description: Internal error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServerErrorResponse'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: The bearer token used is the session token that you receive from the handshake exchange.
security:
  - bearerAuth: [ ]
